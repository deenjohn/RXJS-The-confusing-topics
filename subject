https://github.com/Reactive-Extensions/RxJS/blob/master/doc/howdoi/eventemitter.md

import {Observable} from "rxjs";
import {load, loadWithFetch} from "./loader";
import $ = require('jquery');
import {BehaviorSubject} from 'rxjs/BehaviorSubject';

// To "share" the observable tick$ with two observers,
// observer1 and observer2, we can pipe all notifications
// through a Subject, like so
const tick$ = Observable.interval(1000);
const subject = new Subject();
subject.subscribe(observer1);
subject.subscribe(observer2);
tick$.subscribe(subject);



The example above is “multicasting” the observable tick$ to two observers: observer1 and observer2. 
This is actually what almost all multicasting operators in RxJS do internally. 
For example publish, publishReplay, multicast, share, etc. Really, this is the primary use case for Subjects in RxJS.


